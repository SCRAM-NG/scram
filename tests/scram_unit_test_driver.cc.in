/*
 * Copyright (C) 2018 Olzhas Rakhimov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#define CATCH_CONFIG_RUNNER

#include <boost/filesystem.hpp>
#include <catch2/catch.hpp>

#include "risk_analysis_tests.h"

/// @todo Provide proper parametrized tests.
int main(int argc, char* argv[]) {
  boost::system::error_code ret;
  boost::filesystem::current_path("@CMAKE_SOURCE_DIR@", ret);
  assert(ret == 0);
  auto announce = [] {
    Catch::cout() << "#################### Running with: "
                  << scram::core::test::RiskAnalysisTest::parameter_
                  << " ####################" << std::endl;
  };

  Catch::Session session;

  // Workaround for parametrized tests.
  scram::core::test::RiskAnalysisTest::parameter_ = "bdd";
  announce();
  bool code = session.run(argc, argv) > 0;  // Catch abuses exit codes.
  std::vector<char*> extra_args(argv, argv + argc);
  extra_args.push_back(const_cast<char*>("[pi]"));
  scram::core::test::RiskAnalysisTest::parameter_ = "pi";
  announce();
  code |= session.run(extra_args.size(), extra_args.data()) > 0;

  extra_args.back() = const_cast<char*>("[mocus]");
  scram::core::test::RiskAnalysisTest::parameter_ = "mocus";
  announce();
  code |= session.run(extra_args.size(), extra_args.data()) > 0;

  extra_args.back() = const_cast<char*>("[zbdd]");
  scram::core::test::RiskAnalysisTest::parameter_ = "zbdd";
  announce();
  code |= session.run(extra_args.size(), extra_args.data()) > 0;
  return code;
}
